import logging
import aiohttp

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, BOT_USERNAME, ADMIN_ID

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())


class QuizStates(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    FEEDBACK = State()

#-----------------–∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ-----------------#
quiz = [
    {
        "question": "1Ô∏è‚É£ –ì–¥–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∂–∏—Ç—å?",
        "answers": [
            ("–í –≥–æ—Ä–∞—Ö",         {"porcupine": 2}),
            ("–í –¥–∂—É–Ω–≥–ª—è—Ö",      {"tiger": 2, "monkey": 1}),
            ("–ù–∞ –±–µ—Ä–µ–≥—É –º–æ—Ä—è",  {"pinguin": 2}),
            ("–í —Ç–∏—Ö–æ–º –ª–µ—Å—É",    {"sloth": 2}),
        ]
    },
    {
        "question": "2Ô∏è‚É£ –ö–∞–∫–∞—è —É –≤–∞—Å –ª—é–±–∏–º–∞—è –µ–¥–∞?",
        "answers": [
            ("–§—Ä—É–∫—Ç—ã –∏ –æ—Ä–µ—Ö–∏",    {"monkey": 2, "sloth": 1}),
            ("–ú—è—Å–æ",              {"tiger": 2}),
            ("–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", {"pinguin": 2}),
            ("–ö–æ—Ä–Ω–µ–ø–ª–æ–¥—ã",        {"porcupine": 2}),
        ]
    },
    {
        "question": "3Ô∏è‚É£ –ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        "answers": [
            ("–í –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ö–æ–¥–∞—Ö", {"tiger": 1, "monkey": 1}),
            ("–õ–µ–Ω–∏–≤–æ —á–∏—Ç–∞—è –∫–Ω–∏–≥—É", {"sloth": 2}),
            ("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É—è –ø—Ä–∏—Ä–æ–¥—É", {"pinguin": 1, "porcupine": 1}),
            ("–í –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–∑–µ–π",  {"monkey": 2}),
        ]
    },
    {
        "question": "4Ô∏è‚É£ –í—ã ‚Äî –∂–∞–≤–æ—Ä–æ–Ω–æ–∫ –∏–ª–∏ —Å–æ–≤–∞?",
        "answers": [
            ("–ñ–∞–≤–æ—Ä–æ–Ω–æ–∫",           {"tiger": 1, "porcupine": 1}),
            ("–°–æ–≤–∞",                {"sloth": 2}),
            ("–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ç–æ—Ä(-–∫–∞)", {"monkey": 1, "pinguin": 1}),
            ("–ó–∞—Å—ã–ø–∞—é –≥–¥–µ –ø–æ–ø–∞–ª–æ",  {"porcupine": 1, "sloth": 1}),
        ]
    },
    {
        "question": "5Ô∏è‚É£ –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
        "answers": [
            ("–°–≤–æ–±–æ–¥–∞",      {"monkey": 2, "sloth": 1}),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", {"porcupine": 2}),
            ("–°–∫–æ—Ä–æ—Å—Ç—å",     {"tiger": 2}),
            ("–°–ø–ª–æ—á—ë–Ω–Ω–æ—Å—Ç—å", {"pinguin": 2}),
        ]
    },
]

#-----------------—Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç-----------------#
result_media = {
    "porcupine": {
        "photo":   "https://i.ibb.co/kgj1LVtn/image.webp",
        "caption": "<b>–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ¬†‚Äî –î–∏–∫–æ–±—Ä–∞–∑!</b>\n\n–£—é—Ç–Ω—ã–π, –Ω–æ –±–æ–¥—Ä—ã–π –∫–æ–ª—é—á–∏–π –¥—Ä—É–≥."
    },
    "tiger": {
        "photo":   "https://i.ibb.co/wTxm6Wf/image.jpg",
        "caption": "<b>–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ¬†‚Äî –¢–∏–≥—Ä!</b>\n\n–°–∏–ª—å–Ω—ã–π, –æ—Ç–≤–∞–∂–Ω—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π."
    },
    "monkey": {
        "photo":   "https://i.ibb.co/MkSCMtYc/image.jpg",
        "caption": "<b>–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ¬†‚Äî –û–±–µ–∑—å—è–Ω–∞!</b>\n\n–û–∑–æ—Ä–Ω–æ–π, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π."
    },
    "pinguin": {
        "photo":   "https://i.ibb.co/QBq19WL/image.jpg",
        "caption": "<b>–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ¬†‚Äî –ü–∏–Ω–≥–≤–∏–Ω!</b>\n\n–°—Ç–∏–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–µ–¥–∞–Ω–Ω—ã–π."
    },
    "sloth": {
        "photo":   "https://i.ibb.co/0pqnVPfh/image.jpg",
        "caption": "<b>–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ¬†‚Äî –õ–µ–Ω–∏–≤–µ—Ü!</b>\n\n–°–ø–æ–∫–æ–π–Ω—ã–π, —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π –∏ –±–µ–∑–º—è—Ç–µ–∂–Ω—ã–π."
    },
}

#-----------------—Ñ–æ–ª–±–µ–∫ –Ω–∞ url-----------------#
async def send_photo_from_url(chat_id: int, url: str, caption: str, reply_markup):
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url) as resp:
                resp.raise_for_status()
                data = await resp.read()
        file = BufferedInputFile(data, filename="photo.jpg")
        return await bot.send_photo(chat_id, file, caption=caption, reply_markup=reply_markup)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {url}: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è—é URL")
        return await bot.send_photo(chat_id, url, caption=caption, reply_markup=reply_markup)

#-----------------–≤–æ–ø—Ä–æ—Å—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–Ω–ª–∞–π–Ω-----------------#
async def send_question(state: FSMContext, chat_id: int, data: dict, q_idx: int, state_to: State):
    kb = InlineKeyboardBuilder()
    for a_idx, (text, _) in enumerate(data["answers"]):
        kb.button(text=text, callback_data=f"{q_idx}:{a_idx}")
    kb.adjust(2)
    await bot.send_message(chat_id, data["question"], reply_markup=kb.as_markup())
    await state.set_state(state_to)

#-----------------deep link –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è-----------------#
@dp.message(CommandStart(deep_link=True))
async def cmd_start_payload(message: types.Message, state: FSMContext, command: CommandObject):
    print("pizda")
    payload = command.args
    if "_" in payload:
        uid_str, animal = payload.split("_", 1)
        if uid_str.isdigit() and animal in result_media:
            orig_id = int(uid_str)
            chat = await bot.get_chat(orig_id)
            if chat.username:
                name = f"@{chat.username}"
            else:
                name = f'<a href="tg://user?id={orig_id}">{chat.full_name}</a>'
            media = result_media[animal]
            caption = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —Å—á–∏—Ç–∞–µ—Ç —Å–≤–æ–∏–º —Ç–æ—Ç–µ–º–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º¬†‚Äî "
                f"<b>{media['caption'].split('¬†‚Äî ')[1].split('!</b>')[0]}</b>!"
            )
            kb = InlineKeyboardBuilder()
            kb.button(text="–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="restart")
            kb.adjust(1)
            await send_photo_from_url(message.chat.id, media["photo"], caption, kb.as_markup())
            return
    await cmd_start(message, state)

#-----------------–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞-----------------#
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.update_data(scores={})
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.\n"
        "–Ø –∑–∞–¥–∞–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–∏—Ö.",
        reply_markup=ReplyKeyboardRemove()
    )
    await send_question(state, message.chat.id, quiz[0], 0, QuizStates.Q1)

#-----------------–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤-----------------#
@dp.callback_query(F.data.regexp(r'^\d+:\d+$'))
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    q_idx, a_idx = map(int, callback.data.split(":"))
    data = await state.get_data()
    scores = data.get("scores", {})
    for animal, pts in quiz[q_idx]["answers"][a_idx][1].items():
        scores[animal] = scores.get(animal, 0) + pts
    await state.update_data(scores=scores)
    await callback.answer()
    if q_idx + 1 < len(quiz):
        nxt = list(QuizStates)[q_idx + 1]
        await send_question(state, callback.message.chat.id, quiz[q_idx + 1], q_idx + 1, nxt)
    else:
        best = max(scores.items(), key=lambda x: x[1])[0]
        media = result_media[best]
        share_cd = f"share:{callback.from_user.id}:{best}"
        kb = InlineKeyboardBuilder()
        kb.button(text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –æ–ø–µ–∫–µ", callback_data="learn_more")
        kb.button(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data=share_cd)
        kb.button(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data="contact")
        kb.button(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", callback_data="restart")
        kb.adjust(2)
        await send_photo_from_url(
            callback.message.chat.id,
            media["photo"],
            f"{media['caption']}",
            kb.as_markup()
        )
        fb = InlineKeyboardBuilder()
        fb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")
        await bot.send_message(callback.message.chat.id,
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Äî –Ω–∞–∂–º–∏ –Ω–∏–∂–µ:",
            reply_markup=fb.as_markup()
        )
        await state.clear()

#-----------------–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º-----------------#
@dp.callback_query(F.data.startswith("share:"))
async def share_result(callback: types.CallbackQuery):
    _, uid_str, animal = callback.data.split(":", 2)
    if uid_str.isdigit() and animal in result_media:
        url = f"https://t.me/{BOT_USERNAME}?start={uid_str}_{animal}"
        await callback.answer()
        await bot.send_message(callback.message.chat.id,
            f"üîó –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Å—å:\n{url}"
        )

#-----------------—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –æ–ø–µ–∫–µ-----------------#
@dp.callback_query(F.data == "learn_more")
async def learn_more(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(callback.message.chat.id,
        "<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞</b>\n\n"
        "–°—Ç–∞–≤ –æ–ø–µ–∫—É–Ω–æ–º, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
        "‚Ä¢ –§–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –æ –∂–∏–∑–Ω–∏\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏ –Ω–∞ –±–∏–ª–µ—Ç—ã\n\n"
        "–ü–∏—à–∏: <i>zoofriends@moscowzoo.ru</i>\n"
        "–ó–≤–æ–Ω–∏: <i>+7 (962) 971-38-75</i>"
    )

#-----------------–∫–æ–Ω—Ç–∞–∫—Ç –∑–æ–æ–ø–∞—Ä–∫–∞-----------------#
@dp.callback_query(F.data == "contact")
async def contact(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_contact(callback.message.chat.id,
        phone_number="+7 499 252-29-51",
        first_name="–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ó–æ–æ–ø–∞—Ä–∫"
    )
    await bot.send_message(callback.message.chat.id,
        text="–ü–æ—á—Ç–∞ –∑–æ–æ–ø–∞—Ä–∫–∞: zoopark@culture.mos.ru")

#-----------------—Ä–µ—Å—Ç–∞—Ä—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã-----------------#
@dp.callback_query(F.data == "restart")
async def restart(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
    await state.clear()
    await state.update_data(scores={})
    await send_question(state, callback.message.chat.id, quiz[0], 0, QuizStates.Q1)

#-----------------–æ—Ç—ã–∑–≤—ã-----------------#
@dp.callback_query(F.data == "feedback")
async def ask_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await bot.send_message(callback.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await state.set_state(QuizStates.FEEDBACK)

@dp.message(QuizStates.FEEDBACK)
async def receive_feedback(message: types.Message, state: FSMContext):
    await bot.send_message(ADMIN_ID,
        f"üì¢ –û—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or message.from_user.id}:\n\n{message.text}"
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è")
    await state.clear()


@dp.message()
async def fallback(message: types.Message):
    await message.reply("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")


if __name__ == "__main__":
    dp.run_polling(bot)
